# -*- coding: utf-8 -*-
"""107062333_hw2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yUfuoA5aCxMVjZ665fmtH7bqy4a6_Z1v
"""

import os,sys
import numpy as np
from itertools import combinations
from itertools import permutations
import collections

#print('Number of arguments:', len(sys.argv), 'arguments.')
#print('Argument List:', str(sys.argv[0]),str(sys.argv[1]),str(sys.argv[2]),str(sys.argv[3]))

#min sup = 0.2
import numpy as np
input_data = open(str(sys.argv[2]),'r')
transactions = []
items = dict()
items_name = []
index = 0
for i in list(input_data):
  i = i.split(',')
  lines = map(lambda x:x.strip(),i)
  transactions.append(list(lines))
  index += 1
min_sup = index*float(sys.argv[1])
for i in transactions:
  for j in i:
    if j in items.keys():
      items[j] += 1
    else:
      items[j] = 1
      items_name.append(j)

def filter_L(L,m_sup,ult_result):
  result_dict = {}
  for key, value in L.items():
    if value>=m_sup:
      result_dict[key] = value
      ult_result.append([key,value/index])
  #print result
  #-----------
  return result_dict

#combination should be modify
def my_combination(L,num):
  unique_combinations = []
  unique_combinations = combinations(list(L),num)
  return list(unique_combinations)

def cal_occur(C):
  result_dict = {}
  for i in C:
    cnt = 0
    for j in transactions:
      if set(i).issubset(j):
        cnt +=1
    tar = ','.join(i)
    result_dict[tar] = cnt
  return result_dict

ult_result = []
#print(items)
L1 = sorted(items.items(), key=lambda kv: int(kv[0]))
L1 = collections.OrderedDict(L1)
next_L = L1

next_C = []
#next_next_L = cal_occur(next_C)
com_t = 1
while(len(next_L)!=0):
  com_t += 1
  next_L = filter_L(next_L,min_sup,ult_result) #output =>filtered dict
  next_C = my_combination(L1,com_t) # =>comb list without occurence
  next_next_L = cal_occur(next_C) # =>comb dict with occurence
  next_L = next_next_L

ult_result

#output result
output_data = open(str(sys.argv[3]),'w')
for i in ult_result:
  print("%s:%.4f"%(i[0],np.round(i[1],4)),file = output_data)
input_data.close()
output_data.close()